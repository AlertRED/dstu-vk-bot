import json

from sqlalchemy.orm import Session
from vk_api import VkApi

from app.menues import Menu, TypeItem
from app.controller import Controller
from app.user_dao import userDAO
from app.place_dao import placeDAO
import random
import logging


class app:

    def __init__(self, db: Session, vk: VkApi):
        self.db = db
        self.userDAO = userDAO(self.db)
        self.treatment = Controller(self.userDAO)
        self.vk = vk
        logging.basicConfig(filename="config/history.log", level=logging.INFO, format='%(asctime)s %(message)s',
                            datefmt='[%m-%d-%Y %I:%M:%S]')

    def get_button(self, label, color, payload=""):
        return {
            "action": {
                "type": "text",
                "payload": json.dumps(payload),
                "label": label
            },
            "color": color
        }

    def get_keyboard(self, items: dict):
        buttons = []
        group = []

        colors = {TypeItem.DEFAULT: 'default',
                  TypeItem.BACK: 'negative',
                  TypeItem.MENU: 'positive',
                  TypeItem.SIMPLE: 'primary'}

        for label, obj in items.items():
            limit = 30 // (len(group) + 1)
            group.append((label, colors.get(obj[1], "default")))
            if any(map(lambda x: len(x[0]) > limit, group)) or (len(group) > 4):
                buttons.append(list(map(lambda i: self.get_button(label=i[0], color=i[1]), group[:-1])))
                group = group[-1:]
        else:
            buttons.append(list(map(lambda i: self.get_button(label=i[0], color=i[1]), group)))

        keyboard = {
            "one_time": True,
            "buttons": buttons
        }
        keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
        return str(keyboard.decode('utf-8'))

    def send_message(self, answer, menu, id_user):
        if answer:
            self.vk.method("messages.send",
                           {"peer_id": id_user,
                            "message": answer,
                            "keyboard": self.get_keyboard(menu.items),
                            "random_id": random.randint(1, 2147483647)})
        elif menu:
            self.vk.method("messages.send",
                           {"peer_id": id_user, "message": menu.name,
                            "keyboard": self.get_keyboard(menu.items),
                            "random_id": random.randint(1, 2147483647)})

    def receive_message(self, from_id: int, text: str):
        logging.info("From id: %d, message: %s" % (from_id, text))
        vk_user = self.vk.method("users.get", values={"user_ids": from_id})
        user = self.userDAO.first_or_create_user(from_id, vk_user[0]['first_name'], vk_user[0]['last_name'], root.name)
        self.userDAO.user_inc_request(user.vk_id)
        answer, menu = self.treatment.get_answer(text, user)
        self.send_message(answer, menu, from_id)
        return answer, menu

    def run(self):
        while True:
            # try:
            messages = self.vk.method("messages.getConversations",
                                      {"offset": 0, "count": 20, "filter": "unanswered"})
            if messages["count"] >= 1:
                id = messages["items"][0]["last_message"]["from_id"]
                body = messages["items"][0]["last_message"]["text"]
                self.receive_message(id, body)
            # except Exception as E:
            #     logging.error(E)
            #     # time.sleep(1)


def get_format_place(name):
    place = placeDAO.get_place(name)
    if not place:
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–∞—à–µ–≤–æ–µ–º–æ–µ –º–µ—Å—Ç–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
    result = ''
    result += "–ù–∞–∑–≤–∞–Ω–∏–µ: " + place.name + "\n"
    if place.adress:
        result += "üìç–ê–¥—Ä–µ—Å: " + place.adress + "\n"
    if place.managers:
        result += "üë§–£–ø—Ä–∞–≤–ª—è—é—â–∏–µ: " + ''.join(i.first_name for i in place.managers) + "\n"
    if place.phones:
        result += "üìû–¢–µ–ª–µ—Ñ–æ–Ω—ã: " + ', '.join(i.phone for i in place.phones)+"\n"
    if place.schedules:
        result += "üïó–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: \n" + '\n'.join(
            '%s: %s - %s (–ø–µ—Ä–µ—Ä—ã–≤ %s - %s )' % (
                i.day_of_week.name, i.start_time.strftime("%H:%M"), i.end_time.strftime("%H:%M"),
                i.pause_start_time.strftime("%H:%M"), i.pause_end_time.strftime("%H:%M"))
            for i in place.schedules) + "\n"
    if place.map_url:
        result += "–ö–∞—Ä—Ç–∞: " + place.map_url + "\n"
    return result


def about_me(**kwargs):
    return "–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –î–ì–¢–£. " \
           "–ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∫–æ—Ä–ø—É—Å –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö. " \
           "–°–ø—Ä–∞—à–∏–≤–∞–π, –Ω–µ —Å—Ç–∏—Å–Ω—è–π—Å—è!&#128521;"


root = Menu("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

main_housing = Menu("–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å")
asa_housing = Menu("–ê–°–ê –î–ì–¢–£")

housings = Menu("–ö–æ—Ä–ø—É—Å–∞")
housings.add_basic_item("–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å", "", lambda **kwargs: get_format_place(kwargs['request']))
housings.add_basic_item("–ö–æ–Ω–≥—Ä–µ—Å—Å-—Ö–æ–ª–ª", "", lambda **kwargs: get_format_place(kwargs['request']))
housings.add_basic_item("–ö–æ—Ä–ø—É—Å ‚Ññ2", "", lambda **kwargs: get_format_place(kwargs['request']))
housings.add_basic_item("–ö–æ—Ä–ø—É—Å ‚Ññ3,4,5", "", lambda **kwargs: get_format_place(kwargs['request']))
housings.add_basic_item("–ö–æ—Ä–ø—É—Å ‚Ññ6,7", "", lambda **kwargs: get_format_place(kwargs['request']))
housings.add_basic_item("–ö–æ—Ä–ø—É—Å ‚Ññ8", "", lambda **kwargs: get_format_place(kwargs['request']))

cafe_housings = Menu("–ö–∞—Ñ–µ")
cafe_housings.add_basic_item("–ö–∞—Ñ–µ ¬´–≠–∫—Å–ø—Ä–µ—Å—Å¬ª", "", lambda **kwargs: get_format_place(kwargs['request']))
cafe_housings.add_basic_item("–ö–∞—Ñ–µ ¬´–†—É—Å—å¬ª", "", lambda **kwargs: get_format_place(kwargs['request']))
cafe_housings.add_basic_item("–ö–∞—Ñ–µ ¬´–ú–∏–≥¬ª", "", lambda **kwargs: get_format_place(kwargs['request']))
cafe_housings.add_basic_item("–ö–∞—Ñ–µ ¬´–ú–∏–≥¬ª", "", lambda **kwargs: get_format_place(kwargs['request']))
cafe_housings.add_basic_item("–ö–∞—Ñ–µ ¬´–ö–∞—Ñ–µ–¥—Ä–∞¬ª", "", lambda **kwargs: get_format_place(kwargs['request']))

hostels = Menu("–û–±—â–∞–∂–∏—Ç–∏—è")
hostels.add_basic_item("–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ1", "", lambda **kwargs: get_format_place(kwargs['request']))
hostels.add_basic_item("–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ2", "", lambda **kwargs: get_format_place(kwargs['request']))
hostels.add_basic_item("–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ3", "", lambda **kwargs: get_format_place(kwargs['request']))
hostels.add_basic_item("–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ4", "", lambda **kwargs: get_format_place(kwargs['request']))
hostels.add_basic_item("–û–±—â–µ–∂–∏—Ç–∏–µ ‚Ññ5", "", lambda **kwargs: get_format_place(kwargs['request']))

sport_housings = Menu("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã")
sport_housings.add_basic_item("–õ–µ–≥–∫–æ–∞—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–Ω–µ–∂", "", lambda **kwargs: get_format_place(kwargs['request']))
sport_housings.add_basic_item("–ú–∏–Ω–∏-—Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ", "", lambda **kwargs: get_format_place(kwargs['request']))
sport_housings.add_basic_item("–§—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ", "", lambda **kwargs: get_format_place(kwargs['request']))
sport_housings.add_basic_item("–ë–∞—Å—Å–µ–π–Ω", "", lambda **kwargs: get_format_place(kwargs['request']))

other = Menu("–î—Ä—É–≥–æ–µ")
other.add_basic_item("–•—Ä–∞–º —Å–≤. –º—É—á–µ–Ω–∏—Ü—ã –¢–∞—Ç–∏–∞–Ω—ã", "", lambda **kwargs: get_format_place(kwargs['request']))
other.add_basic_item("–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ ¬´G–∞—Ä–∞–∂¬ª", "", lambda **kwargs: get_format_place(kwargs['request']))
other.add_basic_item("–°–∫–µ–π—Ç-–ø–∞—Ä–∫", "", lambda **kwargs: get_format_place(kwargs['request']))

main_housing.add_menu_item(housings.name, housings, True, "–ù–∞–∑–∞–¥")
main_housing.add_menu_item(cafe_housings.name, cafe_housings, True, "–ù–∞–∑–∞–¥")
main_housing.add_menu_item(hostels.name, hostels, True, "–ù–∞–∑–∞–¥")
main_housing.add_menu_item(sport_housings.name, sport_housings, True, "–ù–∞–∑–∞–¥")
main_housing.add_menu_item(other.name, other, True, "–ù–∞–∑–∞–¥")

root.add_menu_item(main_housing.name, main_housing, True, "–ù–∞–∑–∞–¥")
root.add_menu_item(asa_housing.name, asa_housing, True, "–ù–∞–∑–∞–¥")

root.add_basic_item("–†–∞—Å—Å–∞–∫–∞–∂–∏ –æ —Å–µ–±–µ", "", about_me)
